# RESOURCE BUNDLE PROPERTIES FOR THE UBIQUITOS


# PARAMETER: ubiquitos.radar
#
#      Defines the classes of the Radars that will be dynamically loaded by the middleware. 
#    This Radar class must implement the "br.unb.cic.ubiquitos.radar.Radar" interface.
#    All radar should be listed, separated by a comma(,) - 
#	    eg: ubiquitos.radar=br.unb.cic.MyFirstRadar,br.unb.cic.MySecondRadar
#
#  RADARS 
#  -> Bluetooth Radar - A radar for Bluetooth. 
#       (br.unb.cic.ubiquitos.radar.radars.BluetoothRadar)
#  -> Ethernet Radar using PING discovery (slower, devices must reply to ICMP protocol)
#       (br.unb.cic.ubiquitos.radar.radars.EthernetPingRadar)
#  -> Ethernet Radar using ARP discovery (faster, devices must be on the same net segment, it dosn't work on routed networks).
#       (br.unb.cic.ubiquitos.radar.radars.EthernetArpRadar)
#ubiquitos.radar=br.unb.unbiquitous.ubiquitos.network.bluetooth.radar.BluetoothRadar(br.unb.unbiquitous.ubiquitos.network.bluetooth.connectionManager.BluetoothConnectionManager)

ubiquitos.radar=br.unb.unbiquitous.ubiquitos.network.ethernet.radar.EthernetArpRadar

# PARAMETER: ubiquitos.connectionManager
#
#      Defines the classes of the Connection Managers that will be dynamically loaded by the middleware. 
#    This Connection Manager class must implement the "br.unb.cic.ubiquitos.connectionmanager.ConnectionManager" interface.
#    All radar should be listed, separated by a comma(,)
#	    eg: ubiquitos.connectionManager=br.unb.cic.MyFirstConnMngr,br.unb.cic.MySecondConnMngr
#
#  CONNECTION MANAGERS 
#  -> Bluetooth Connection Manager
#       (br.unb.unbiquitous.ubiquitos.network.bluetooth.connectionManager.BluetoothConnectionManager)
#  -> Ethernet Connection Manager
#       (org.unbiquitous.uos.network.socket.connectionManager.EthernetTCPConnectionManager)
#		(org.unbiquitous.uos.network.socket.connectionManager.EthernetUDPConnectionManager)
	
ubiquitos.connectionManager=org.unbiquitous.uos.network.socket.connectionManager.TCPConnectionManager,\
							org.unbiquitous.uos.network.socket.connectionManager.UDPConnectionManager
#ubiquitos.connectionManager=br.unb.unbiquitous.ubiquitos.network.bluetooth.connectionManager.BluetoothConnectionManager

# PARAMETER: 
#		ubiquitos.eth.tcp.port : Defines the number of ethernet port to be used for the control channel. 
#		ubiquitos.eth.tcp.port.control : Defines the number of the port to be used for control channel with other devices (if not informed 'ubiquitos.eth.tcp.port' will be used)
#		ubiquitos.eth.tcp.passivePortRange : Port range for creating passive stream connection data channels
ubiquitos.eth.tcp.port=14984
ubiquitos.eth.tcp.passivePortRange=14985-15000
ubiquitos.eth.udp.port=15001
ubiquitos.eth.udp.passivePortRange=15002-15017
ubiquitos.eth.rtp.passivePortRange=15018-15028


# PARAMETER: ubiquitos.bth.provider
#
#      Defines the provider of bluetooth connection.

ubiquitos.bth.provider=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA


# PARAMETER: ubiquitos.bth.client
#
#      Defines the client of bluetooth connection.

ubiquitos.bth.client=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB


# PARAMETER: ubiquitos.driver.deploylist
#	
#	   Defines the list o Driver to be loaded in the startup of the context.
#	   Drivers must be separated by semicolon (';') and can have its instanceId informed (optional)
#
#	   Ex:
#        ubiquitos.driver.deploylist=br.unb.unbiquitous.ubiquitos.context.EchoDriver(pingDriver);\
#                                    br.unb.unbiquitous.ubiquitos.context.VGADriver(monitorSamsung);\
#                                    br.unb.unbiquitous.ubiquitos.context.KeyboardDriver

ubiquitos.driver.deploylist=org.unbiquitous.uos.core.driver.DeviceDriverImpl;\
                            org.unbiquitous.uos.core.driver.OntologyDriverImpl;\
                            org.unbiquitous.uos.core.driver.UserDriver(My_user_driver);

# PARAMETER: ubiquitos.uos.deviceName
#	
#	   Defines the proposed device name of the current device.

ubiquitos.uos.deviceName=DublinDevice

# PARAMETER: ubiquitos.security.authenticationHandlerList
#	
#		Defines the AuthenticationHandlers for the SecurtyTypes supported by the middleware and its services
#		The list must be separated by commas (',')
#
#		Ex:
#		  ubiquitos.security.authenticationHandlerList=br.unb.unbiquitous.ubiquitos.uos.security.basic.BasicSecurityHandler,\
#													   br.unb.unbiquitous.ubiquitos.uos.security.basic.LDAPAuthenticationHandler
#ubiquitos.security.authenticationHandlerList=br.unb.unbiquitous.ubiquitos.uos.security.basic.BasicSecurityHandler

# PARAMETER: ubiquitos.security.translationHandlerLis
#	
#		Defines the TranslationHandlers for the SecurtyTypes supported by the middleware and its services
#		The list must be separated by commas (',')
#
#		Ex:
#		  ubiquitos.security.authenticationHandlerList=br.unb.unbiquitous.ubiquitos.uos.security.basic.BasicSecurityHandler,\
#													   br.unb.unbiquitous.ubiquitos.uos.security.basic.RSATranslationHandler
#ubiquitos.security.translationHandlerList=br.unb.unbiquitous.ubiquitos.uos.security.basic.BasicSecurityHandler

# PARAMETER: ubiquitos.application.deploylist
#	
#	   Defines the list o Applications to be loaded in the startup of the context.
#	   Applications must be separated by semicolon (';') and can have its instanceId informed (optional)
#
#	   Ex:
#        ubiquitos.driver.deploylist=br.unb.unbiquitous.ubiquitos.applications.Ping(Ping);\
#                                    br.unb.unbiquitous.ubiquitos.applications.UosChat(Chat);\
#                                    br.unb.unbiquitous.ubiquitos.applications.UVNCApp(uVNC)

ubiquitos.application.deploylist=org.unbiquitous.uos.core.uosontoapp.OntoApp;\
                                 org.unbiquitous.uos.core.uosdriver.UserConsole

# PARAMETER: ubiquitos.application.path
#	
#	   Defines the Applications path, from where the applications will be loaded in the startup of the context.
#	   
#	   Ex: applications/
#                                    
ubiquitos.application.path=applications/

# PARAMETER: ubiquitos.ontology.path
#	
#	   Defines the Ontology path, from where context information will be persisted.
#	   
#	   Ex: src/main/resources/owl/uoscontext.owl
#                                    
ubiquitos.ontology.path=resources/uoscontext.owl

# PARAMETER: ubiquitos.application.path
#	
#	   Defines the Applications path, from where the applications will be loaded in the startup of the context.
#	   
#	   Ex: driver/
#                                    
ubiquitos.driver.path=drivers/

ubiquitos.persistence.hsqldb.database=uosDatabase
ubiquitos.ontology.reasonerFactory=org.unbiquitous.uos.core.ontology.OntologyReasonerTest
#ubiquitos.persistence.hsqldb.database_url=jdbc\:hsqldb\:file\:resources/db/

# PARAMETER: ubiquitos.message.response.timeout
#
#		Defines the timeout (in milliseconds) for waiting a response while sending a message
#
#		Ex: ubiquitos.message.response.timeout=300

# PARAMETER: ubiquitos.message.response.retry
#
#		Defines the amount of times must retry to receive a response for a sent message.
#
#		Ex: ubiquitos.message.response.retry=3